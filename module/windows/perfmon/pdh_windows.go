// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package perfmon

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

var (
	modpdh = syscall.NewLazyDLL("pdh.dll")

	procPdhOpenQuery             = modpdh.NewProc("PdhOpenQuery")
	procPdhAddCounterW           = modpdh.NewProc("PdhAddCounterW")
	procPdhCollectQueryData      = modpdh.NewProc("PdhCollectQueryData")
	procGetFormattedCounterValue = modpdh.NewProc("GetFormattedCounterValue")
)

func _PdhOpenQuery(dataSource *string, userData int, query *syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procPdhOpenQuery.Addr(), 3, uintptr(unsafe.Pointer(dataSource)), uintptr(userData), uintptr(unsafe.Pointer(query)))
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func _PdhAddCounter(query syscall.Handle, counterPath string, userData int, counter *syscall.Handle) (err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(counterPath)
	if err != nil {
		return
	}
	return __PdhAddCounter(query, _p0, userData, counter)
}

func __PdhAddCounter(query syscall.Handle, counterPath *uint16, userData int, counter *syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall6(procPdhAddCounterW.Addr(), 4, uintptr(query), uintptr(unsafe.Pointer(counterPath)), uintptr(userData), uintptr(unsafe.Pointer(counter)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func _PdhCollectQueryData(query syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procPdhCollectQueryData.Addr(), 1, uintptr(query), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func _PdhGetFormattedCounterValue(counter syscall.Handle, format int, counterType int, value *PdhCounterValue) (err error) {
	r1, _, e1 := syscall.Syscall6(procGetFormattedCounterValue.Addr(), 4, uintptr(counter), uintptr(format), uintptr(counterType), uintptr(unsafe.Pointer(value)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
